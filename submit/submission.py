
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: solution.ipynb

import numpy as np
import math
from helper_functions import *

def get_initial_means(array, k):
    """
    Picks k random points from the 2D array
    (without replacement) to use as initial
    cluster means

    params:
    array = numpy.ndarray[numpy.ndarray[float]] - m x n | datapoints x features

    k = int

    returns:
    initial_means = numpy.ndarray[numpy.ndarray[float]]
    """

    initial_means =  array.copy()
    np.random.shuffle(initial_means)

    return initial_means[:k,:]
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_step(X, k, means):
    """
    A single update/step of the K-means algorithm
    Based on a input X and current mean estimate,
    predict clusters for each of the pixels and
    calculate new means.
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n | pixels x features (already flattened)
    k = int
    means = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    (new_means, clusters)
    new_means = numpy.ndarray[numpy.ndarray[float]] - k x n
    clusters = numpy.ndarray[int] - m sized vector
    """
    if means is None:
        means = get_initial_means(X, k)

    l = np.zeros((k,X.shape[0]))
    for i in range(k):
        l[i] = np.sum((X-means[i])**2, axis = 1)

    clusters = np.argmin(l, axis = 0)

    new_means = np.zeros((k,X.shape[1]))
    for i in range(k):
        new_means[i] = np.mean(X[np.where(clusters == i)[0]] , axis=0)

    return new_means,clusters
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def k_means_segment(image_values, k=3, initial_means=None):
    """
    Separate the provided RGB values into
    k separate clusters using the k-means algorithm,
    then return an updated version of the image
    with the original values replaced with
    the corresponding cluster values.

    params:
    image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    k = int
    initial_means = numpy.ndarray[numpy.ndarray[float]] or None

    returns:
    updated_image_values = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - r x c x ch
    """

    r,c,ch = image_values.shape
    img1 = image_values
    img2 = np.zeros((r*c,3))
    img2[:,0] = img1[:,:,0].reshape(r*c)
    img2[:,1] = img1[:,:,1].reshape(r*c)
    img2[:,2] = img1[:,:,2].reshape(r*c)

    if initial_means is None:
        initial_means = get_initial_means(img2, k)

    iterations = 50
    means = initial_means

    for i in range(iterations):
        means, clusters = k_means_step(img2, k, means)

    for i in range(k):
        img2[np.where(clusters == i)] = means[i]


    img2 = img2.reshape(r,c,ch)


    return img2
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def initialize_parameters(X, k):
    """
    Return initial values for training of the GMM
    Set component mean to a random
    pixel's value (without replacement),
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """

    MU = get_initial_means(X,k)

    SIGMA = np.zeros((k,X.shape[1],X.shape[1]))

    for i in range(k):
        SIGMA[i] = (1/X.shape[0])*np.matmul((X - MU[i]).transpose(),(X - MU[i]))

    PI = np.full((k), 1/k)

    return MU, SIGMA, PI
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def compute_sigma(X, MU):
    """
    Calculate covariance matrix, based in given X and MU values

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n

    returns:
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    """

    m = X.shape[0]
    n = X.shape[1]
    k = MU.shape[0]
    SIGMA = np.zeros((k, n, n))

    for i in range(k):
        SIGMA[i] = (1 / m) * np.matmul((X - MU[i]).transpose(), (X - MU[i]))

    return SIGMA
    raise NotImplementedError()

def prob(x, mu, sigma):
    """Calculate the probability of a single
    data point x under component with
    the given mean and covariance.
    # NOTE: there is nothing to vectorize here yet,
    # it's a simple check to make sure you got the
    # multivariate normal distribution formula right
    # which is given by N(x;MU,SIGMA) above

    params:
    x = numpy.ndarray[float]
    mu = numpy.ndarray[float]
    sigma = numpy.ndarray[numpy.ndarray[float]]

    returns:
    probability = float
    """
    n = mu.shape[0]

    detSIGMA = np.linalg.det(sigma)
    denom = (detSIGMA**(-0.5))/(((2* math.pi)**(n/2)))
    a = (x - mu).transpose()
    b = np.matmul(np.linalg.inv(sigma), (x-mu))
    bracket = -0.5*(np.matmul(a,b))
    probability = denom*math.e**(bracket)
    return probability
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def E_step(X,MU,SIGMA,PI,k):
    """
    E-step - Expectation
    Calculate responsibility for each
    of the data points, for the given
    MU, SIGMA and PI.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """
    m = X.shape[0]
    n = X.shape[1]

    responsibility = np.zeros((k,m))

    for i in range(k):
        detSIGMA = np.linalg.det(SIGMA[i])
        denom = (1/(np.power(2* math.pi,n/2)*detSIGMA**(0.5)))
        a = X - MU[i]
        a1 = a.reshape(m,1,n)
        a2 = np.linalg.inv(SIGMA[i])
        a2 = a2[None,:,:]
        a3 = a.reshape(m,n,1)
        bracket = np.matmul(a1, np.matmul(a2,a3))
        bracket = -0.5*bracket.flatten()
        responsibility[i] = denom*math.e**bracket
        responsibility[i] = PI[i]*responsibility[i]

    responsibility = responsibility /np.sum(responsibility, axis=0)


    return responsibility
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def M_step(X, r, k):
    """
    M-step - Maximization
    Calculate new MU, SIGMA and PI matrices
    based on the given responsibilities.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    r = numpy.ndarray[numpy.ndarray[float]] - k x m
    k = int

    returns:
    (new_MU, new_SIGMA, new_PI)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    """

    m = X.shape[0]
    n = X.shape[1]

    new_PI = np.zeros((k))
    new_MU = np.zeros((k,n))
    new_SIGMA = np.zeros((k,n,n))
    totWeight = np.sum(r)
    for i in range(k):
        new_PI[i] = np.sum(r[i])/totWeight
        new_MU[i] = (1/np.sum(r[i]))*np.matmul(r[i], X)

        a = X - new_MU[i]
        a1 = a.reshape(m,n,1)
        a2 = a.reshape(m,1,n)
        b = a1*a2
        b1 = r[i].reshape(m,1,1)
        b2 = b1*b
        b3 = np.sum(b2, axis=0)
        new_SIGMA[i] = b3/np.sum(r[i])

    return new_MU, new_SIGMA, new_PI
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def likelihood(X, PI, MU, SIGMA, k):
    """Calculate a log likelihood of the
    trained model based on the following
    formula for posterior probability:

    log10(Pr(X | mixing, mean, stdev)) = sum((n=1 to N), log10(sum((k=1 to K),
                                      mixing_k * N(x_n | mean_k,stdev_k))))

    Make sure you are using log base 10, instead of log base 2.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    returns:
    log_likelihood = float
    """

    m = X.shape[0]
    n = X.shape[1]
    probability = np.zeros((k,m))


    for i in range(k):
        detSIGMA = np.linalg.det(SIGMA[i])
        denom = (1/(np.power(2* math.pi,n/2)*detSIGMA**(0.5)))
        a = X - MU[i]
        a1 = a.reshape(m,1,n)
        a2 = np.linalg.inv(SIGMA[i])
        a2 = a2[None,:,:]
        a3 = a.reshape(m,n,1)
        bracket = np.matmul(a1, np.matmul(a2,a3))
        bracket = bracket.flatten()
        bracket = -0.5*bracket
        probability[i] = denom*math.e**bracket

    log_likelihood = np.sum(np.log10([PI.dot(probability[:,j]) for j in range(m)]))

    return log_likelihood
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def train_model(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True,
    see default convergence_function example
    in `helper_functions.py`

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """

    if initial_values is None:
        MU, SIGMA, PI = initialize_parameters(X, k)
    else:
        (MU, SIGMA, PI) = initial_values

    converged = False
    conv_cntr = 0

    while not converged:
        prev_likelihood = likelihood(X, PI, MU, SIGMA, k)
        r = E_step(X, MU, SIGMA, PI, k)
        MU, SIGMA, PI = M_step(X, r, k)
        new_likelihood = likelihood(X, PI, MU, SIGMA, k)
        conv_cntr, converged = convergence_function(prev_likelihood, new_likelihood, conv_cntr)


    return (MU, SIGMA, PI, r)
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def cluster(r):
    """
    Based on a given responsibilities matrix
    return an array of cluster indices.
    Assign each datapoint to a cluster based,
    on component with a max-likelihood
    (maximum responsibility value).

    params:
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    return:
    clusters = numpy.ndarray[int] - m x 1
    """
    '''
    get argument where value smallest
    '''

    return np.argmax(r, axis=0)

    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def segment(X, MU, k, r):
    """
    Segment the X matrix into k components.
    Returns a matrix where each data point is
    replaced with its max-likelihood component mean.
    E.g., return the original matrix where each pixel's
    intensity replaced with its max-likelihood
    component mean. (the shape is still mxn, not
    original image size)

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    k = int
    r = numpy.ndarray[numpy.ndarray[float]] - k x m - responsibility matrix

    returns:
    new_X = numpy.ndarray[numpy.ndarray[float]] - m x n
    """
    new_X = np.zeros((X.shape))
    clusters = cluster(r)
    for i in range(k):
        new_X[np.where(clusters == i)] = MU[i]

    return new_X
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def best_segment(X,k,iters):
    """Determine the best segmentation
    of the image by repeatedly
    training the model and
    calculating its likelihood.
    Return the segment with the
    highest likelihood.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    iters = int

    returns:
    (likelihood, segment)
    likelihood = float
    segment = numpy.ndarray[numpy.ndarray[float]]
    """

    new_X_best = np.zeros((X.shape))
    max_l = float('-inf')
    for i in range(iters):
        (MU, SIGMA, PI, r) = train_model(X, k, default_convergence)
        l = likelihood(X, PI, MU, SIGMA, k)
        if l > max_l:
            max_l = l
            new_X_best = segment(X, MU, k, r)

    return (max_l, new_X_best)
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def improved_initialization(X,k):
    """
    Initialize the training
    process by setting each
    component mean using some algorithm that
    you think might give better means to start with,
    based on the mean calculate covariance matrices,
    and set each component mixing coefficient (PIs)
    to a uniform values
    (e.g. 4 components -> [0.25,0.25,0.25,0.25]).

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int

    returns:
    (MU, SIGMA, PI)
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    """
    iter = 20
    speed = 10
    n = X.shape[1]
    b_MU = np.zeros((k,n))
    l_max = float('-inf')
    for j in range(iter):
        (MU, SIGMA, PI) = initialize_parameters(X,k)
        for i in range(speed):
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X,r,k)
        l = likelihood(X, PI, MU, SIGMA,k)
        if l > l_max:
            b_MU = MU
            l_max = l
    SIGMA = compute_sigma(X, b_MU)
    PI =  np.full((k), 1/k)

    return (b_MU, SIGMA, PI)
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def new_convergence_function(previous_variables, new_variables, conv_ctr,
                             conv_ctr_cap=1):
    """
    Convergence function
    based on parameters:
    when all variables vary by
    less than 10% from the previous
    iteration's variables, increase
    the convergence counter.

    params:
    previous_variables = [numpy.ndarray[float]]
                         containing [means, variances, mixing_coefficients]
    new_variables = [numpy.ndarray[float]]
                    containing [means, variances, mixing_coefficients]
    conv_ctr = int
    conv_ctr_cap = int

    return:
    (conv_crt, converged)
    conv_ctr = int
    converged = boolean
    """

    change = np.fabs((new_variables - previous_variables)/previous_variables)
    if change < 0.01:
        conv_ctr += 1
    else:
        conv_ctr = 0

    return (conv_ctr, conv_ctr > conv_ctr_cap)

    raise NotImplementedError()

def train_model_improved(X, k, convergence_function, initial_values = None):
    """
    Train the mixture model using the
    expectation-maximization algorithm.
    E.g., iterate E and M steps from
    above until convergence.
    If the initial_values are None, initialize them.
    Else it's a tuple of the format (MU, SIGMA, PI).
    Convergence is reached when convergence_function
    returns terminate as True. Use new_convergence_fuction
    implemented above.

    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    k = int
    convergence_function = func
    initial_values = None or (MU, SIGMA, PI)

    returns:
    (new_MU, new_SIGMA, new_PI, responsibility)
    new_MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    new_SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    new_PI = numpy.ndarray[float] - k x 1
    responsibility = numpy.ndarray[numpy.ndarray[float]] - k x m
    """

    #a = datetime.now()
    if initial_values is None:
        MU, SIGMA, PI =improved_initialization(X, k)
    else:
        (MU, SIGMA, PI) = initial_values

    converged = False
    conv_cntr = 0
    max_l = float('-inf')
    iters = 3
    speed = 50

    best_MU = np.zeros((MU.shape))
    #best_SIGMA = np.zeros((SIGMA.shape))
    #best_PI = np.zeros((PI.shape))
    best_r = np.zeros((MU.shape[0], X.shape[0]))

    for i in range(iters):
        if i != 0:
            MU, SIGMA, PI =improved_initialization(X, k)

        #s = datetime.now()
        for j in range(speed):
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X, r, k)
        #e = datetime.now()
        #print(e-s)

        while not converged:
            prev_likelihood = likelihood(X, PI, MU, SIGMA, k)
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X, r, k)
            new_likelihood = likelihood(X, PI, MU, SIGMA, k)
            #print(new_likelihood)
            conv_cntr, converged = convergence_function(prev_likelihood, new_likelihood, conv_cntr)
        if new_likelihood > max_l:
                max_l = new_likelihood
                best_MU = MU
                best_r = r
        converged = False
        conv_cntr = 0
        #print('imp ',i)
        #print(new_likelihood)
    #print(max_l)
    best_SIGMA = compute_sigma(X, best_MU)
    best_PI =  np.full((k), 1/k)
    #b = datetime.now()
    #print(b-a)
    return (best_MU, best_SIGMA, best_PI, best_r)
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
# Unittest below will check both of the functions at the same time.
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def improved_initialization1(X,k):

    iter = 5
    speed = 10
    n = X.shape[1]
    b_MU = np.zeros((k,n))
    l_max = float('-inf')
    for j in range(iter):
        (MU, SIGMA, PI) = initialize_parameters(X,k)
        for i in range(speed):
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X,r,k)
        l = likelihood(X, PI, MU, SIGMA,k)
        if l > l_max:
            b_MU = MU
            l_max = l
    SIGMA = compute_sigma(X, b_MU)
    PI =  np.full((k), 1/k)
    return (b_MU, SIGMA, PI)
    raise NotImplementedError()

def new_convergence_function1(previous_variables, new_variables, conv_ctr,
                             conv_ctr_cap=1):

    change = np.fabs((new_variables - previous_variables)/previous_variables)
    if change < 0.01:
        conv_ctr += 1
    else:
        conv_ctr = 0

    return (conv_ctr, conv_ctr > conv_ctr_cap)

    raise NotImplementedError()

def train_model_improved1(X, k, convergence_function, initial_values=None):
    # a = datetime.now()
    if initial_values is None:
        MU, SIGMA, PI = improved_initialization1(X, k)
    else:
        (MU, SIGMA, PI) = initial_values

    converged = False
    conv_cntr = 0
    new = False
    max_l = float('-inf')
    iters = 3
    speed = 50

    best_MU = np.zeros((MU.shape))
    best_SIGMA = np.zeros((SIGMA.shape))
    best_PI = np.zeros((PI.shape))
    best_r = np.zeros((MU.shape[0], X.shape[0]))

    for i in range(iters):
        if i != 0:
            MU, SIGMA, PI = improved_initialization1(X, k)

        # s = datetime.now()
        for j in range(speed):
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X, r, k)
        # e = datetime.now()
        # print(e-s)

        while not converged:
            prev_likelihood = likelihood(X, PI, MU, SIGMA, k)
            r = E_step(X, MU, SIGMA, PI, k)
            MU, SIGMA, PI = M_step(X, r, k)
            new_likelihood = likelihood(X, PI, MU, SIGMA, k)
            # print(new_likelihood)
            conv_cntr, converged = convergence_function(prev_likelihood, new_likelihood, conv_cntr)
        if new_likelihood > max_l:
            max_l = new_likelihood
            best_MU = MU.copy()
            best_SIGMA = SIGMA.copy()
            best_PI = PI.copy()
            best_r = r.copy()
        converged = False
        conv_cntr = 0

    return (best_MU, best_SIGMA, best_PI, best_r)
    raise NotImplementedError()

def bayes_info_criterion(X, PI, MU, SIGMA, k):
    """
    See description above
    params:
    X = numpy.ndarray[numpy.ndarray[float]] - m x n
    MU = numpy.ndarray[numpy.ndarray[float]] - k x n
    SIGMA = numpy.ndarray[numpy.ndarray[numpy.ndarray[float]]] - k x n x n
    PI = numpy.ndarray[float] - k x 1
    k = int

    return:
    bayes_info_criterion = int
    """
    m = X.shape[0]
    n = X.shape[1]
    #w = np.unique(PI).size + np.unique(MU).size + np.unique(SIGMA).size
    #w = k*n + k-1 + k*n*(n-1)/2
    w = k*n*(n-1)/2 + 2*k*n
    L  = likelihood(X, PI, MU, SIGMA, k)
    return w*n*np.log10(m) - 2* L
    raise NotImplementedError()

########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

def BIC_likelihood_model_test(image_matrix, comp_means):
    """Returns the number of components
    corresponding to the minimum BIC
    and maximum likelihood with respect
    to image_matrix and comp_means.

    params:
    image_matrix = numpy.ndarray[numpy.ndarray[float]] - m x n
    comp_means = list(numpy.ndarray[numpy.ndarray[float]]) - list(k x n) (means for each value of k)

    returns:
    (n_comp_min_bic, n_comp_max_likelihood)
    n_comp_min_bic = int
    n_comp_max_likelihood = int
    """

    bic_min_val = float('inf')
    bic_min = -1
    lik_max = -1
    lik_max_val = float('-inf')
    max_k = len(comp_means)
    for i in range(max_k):
        MU = comp_means[i]
        k = MU.shape[0]
        n = MU.shape[1]
        X = image_matrix.reshape(-1,n)
        (MU, SIGMA, PI,r) = train_model_improved1(X, k, new_convergence_function1, None)
        bic = bayes_info_criterion(X,PI,MU,SIGMA,k)
        if bic < bic_min_val:
            bic_min_val = bic
            bic_min = k
        lik = likelihood(X, PI, MU, SIGMA, k)
        if lik > lik_max_val:
            lik_max_val = lik
            lik_max = k

    return (bic_min, lik_max)
    raise NotImplementedError()

def return_your_name():
    return 'Disha Das'
    raise NotImplemented()

def bonus(points_array, means_array):
    """
    Return the distance from every point in points_array
    to every point in means_array.

    returns:
    dists = numpy array of float
    """
    x = points_array[:, None, :]
    c = means_array[None, :, :]
    dists = x - c
    dists = np.linalg.norm(dists, 2, axis=2)

    return dists




# There are no local test for thus question, fill free to create them yourself.
# Feel free to play with it in a separate python file, and then just copy over
# your implementation before the submission.